#include<stdio.h>
#include<stdlib.h>
struct node{
int data;
struct node* next;};

void Push(struct node** headRef, int data) {
	struct node* newNode = malloc(sizeof(struct node));
	newNode->data = data;
	newNode->next = *headRef;
	*headRef = newNode;
}

struct node* build1(){
	struct node* head ;//=NULL;
	struct node* second ;//=NULL;
	struct node* third ;//=NULL;
	head =malloc(sizeof (struct node));
	second=malloc(sizeof (struct node));
	third=malloc(sizeof (struct node));
	head->data=2;
	head->next=second;

	second->data=5;
	second->next=third;

	third->data=1;
	third->next=NULL;
	return head;
}

struct node* build2(){
        struct node* head ;//=NULL;
        struct node* second ;//=NULL;
        struct node* third ;//=NULL;
        head =malloc(sizeof (struct node));
        second=malloc(sizeof (struct node));
        third=malloc(sizeof (struct node));
        head->data=1;
        head->next=second;

        second->data=2;
        second->next=third;

        third->data=3;
        third->next=NULL;
	return head;
}

struct node* addathead(){
	struct node* hea=NULL;
	int i;
	for(i=6;i>0;i--)
		Push(&hea,i);
	return (hea);
}
struct node* buildm()
{
struct node dummy;
struct node *tail=&dummy;
int i;
dummy.next=NULL;
	for(i=1;i<6;i++){
		Push(&(tail->next),i);
		tail=tail->next;
	}
return (dummy.next);
}
void disp(struct node* head){
        struct node* n=head;
	printf("\n");
        while(n!=0){
                printf(" %d ",n->data);
                n=n->next;
        }
	printf("\n");

//      return count;
}


int counts(struct node* head,int t){
	int count=0;
	struct node* n=head;
	while(n!=0){
		if((n->data)==t)
			count++;
		//printf("%d",n->data);
		n=n->next;
	}
	return count;
}
struct node* srtins(struct node** head,int n)
{

        struct node* h=*head;
        if(h!=NULL){
                if(n< h->data)
                        Push(&*head,n);
                else if(n>h->data){

                        while(h->next!=NULL&&n>(h->next->data) ){
                                h=h->next;
                        }
                        struct node* ali=malloc(sizeof(struct node));
                        ali->data=n;
                        ali->next=h->next;
                        h->next=ali;
                        ali->data=n;
                }
        }
        else{
                *head=malloc(sizeof(struct node));
                struct node* h= *head;
                h->data=n;
                h->next=NULL;
        }
}


struct node* insrt(struct node* head)
{
	struct node* h=head;
	struct node* newnode=malloc(sizeof(struct node));
	newnode=NULL;
	while(h !=NULL){
		//h=h->next;
		srtins(&newnode,h->data);
		//n->next;
		h=h->next;
	//disp(ne);
	}
	disp(newnode);
}
void append(struct node **aref,struct node** bref)
{
	struct node*a =*aref;
	struct node*b =*bref;
	if(a==NULL){
		*aref=malloc(sizeof(struct node));
		 struct node* h= *aref;
		h->data=b->data;
		h->next=b->next;
		}
	else{
		while(a->next!=NULL)
			a=a->next;
		a->next=b;
	}

}
int count(struct node* head)
{
int count=0;
struct node* h=head;
while(h!=NULL){
	count++;
	h=h->next;
}
return count;
}
void split(struct node** head,struct node** front,struct node** back)
{
int  x,y,t= count(*head);
//printf("%d",t);
if(t%2==0) x=y=t/2;
else x=t/2+1;
//*front=malloc(sizeof(struct node));
//*back=malloc(sizeof(struct node));
struct node* h=*head;
struct node* f=*front;
struct node* b=*back;
	while(h!=NULL&&x>0){
		f->data=h->data;
		f=f->next=malloc(sizeof(struct node));
		h=h->next;
		x--;}
	while(h!=0){
		b->data=h->data;
		b=b->next=malloc(sizeof(struct node));
		printf("%d",);
		h=h->next;}
}

main(){
int n;
struct node* h;
struct node* t;
struct node* m;
h=build1();
//t=build2();
split(&h,&t,&m);
disp(t);
//disp(m);
//disp(h);
//insrt(h);
//n=count(h);
//printf("%d",n);
}
